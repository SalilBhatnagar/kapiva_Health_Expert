(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[14],{

/***/ "./assets/js/theme/checkout.js":
/*!*************************************!*\
  !*** ./assets/js/theme/checkout.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Checkout; });
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./page-manager */ "./assets/js/theme/page-manager.js");
/* harmony import */ var _bigcommerce_checkout_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/checkout-sdk */ "./node_modules/@bigcommerce/checkout-sdk/dist/checkout-sdk.js");
/* harmony import */ var _bigcommerce_checkout_sdk__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_bigcommerce_checkout_sdk__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _common_models_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/models/forms */ "./assets/js/theme/common/models/forms.js");
/* harmony import */ var _common_nod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common/nod */ "./assets/js/theme/common/nod.js");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var win = window,
  listeners = [],
  doc = win.document,
  MutationObserver = win.MutationObserver || win.WebKitMutationObserver,
  observer,
  _this;
var service = Object(_bigcommerce_checkout_sdk__WEBPACK_IMPORTED_MODULE_1__["createCheckoutService"])();
var Checkout = /*#__PURE__*/function (_PageManager) {
  _inheritsLoose(Checkout, _PageManager);
  function Checkout() {
    return _PageManager.apply(this, arguments) || this;
  }
  var _proto = Checkout.prototype;
  _proto.onReady = /*#__PURE__*/function () {
    var _onReady = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var script;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this = this;
              // const state = await service.loadCheckout();
              // var get_checkout = state.data.getCheckout();
              // console.log('get_checkout', get_checkout);
              // var grandTotal = get_checkout.grandTotal;
              script = document.createElement('script');
              script.src = "https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js";
              document.head.appendChild(script);
              this.ready('.layout-cart .cart.optimizedCheckout-orderSummary', function (element) {
                var groupID = jquery__WEBPACK_IMPORTED_MODULE_2___default()('#customer-group-id').text();
                if (groupID.length === 0) {
                  groupID = 0;
                }
                var selectorDiv = jquery__WEBPACK_IMPORTED_MODULE_2___default()('.layout-cart [data-test=redeemable-collapsable]');
                _this.getCoupons(groupID, selectorDiv);
                jquery__WEBPACK_IMPORTED_MODULE_2___default()('.layout-cart [data-test=redeemable-collapsable] .redeemable-entry .optimizedCheckout-form-input').attr('id', 'cartLayoutInput');
                jquery__WEBPACK_IMPORTED_MODULE_2___default()(document).on("click", ".layout-cart [data-test=redeemable-collapsable] input[name=coupon]", function (e) {
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("input[name=coupon]").removeAttr("checked");
                  if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).hasClass("checked")) {
                    e.preventDefault();
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()(".optimizedCheckout-form-input").val('');
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).removeAttr("checked");
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).removeClass("checked");
                  } else {
                    var code = jquery__WEBPACK_IMPORTED_MODULE_2___default()('input[name=coupon]:checked').val();
                    var couponInput = document.getElementById('cartLayoutInput');
                    _this.setNativeValue(couponInput, code);
                    couponInput.dispatchEvent(new Event('input', {
                      bubbles: true
                    }));
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()("input:radio[name=coupon]").removeClass("checked");
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).addClass("checked");
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).attr("checked", true);
                  }
                });
              });
              this.ready('.checkout-form .form-fieldset ul.form-checklist', function (element) {
                var groupID = jquery__WEBPACK_IMPORTED_MODULE_2___default()('#customer-group-id').text();
                if (groupID.length === 0) {
                  groupID = 0;
                }
                var selectorDiv = jquery__WEBPACK_IMPORTED_MODULE_2___default()('.checkout-form .form-fieldset.redeemable-payments [data-test=redeemable-collapsable]');
                _this.getCoupons(groupID, selectorDiv);
                jquery__WEBPACK_IMPORTED_MODULE_2___default()('.checkout-form [data-test=redeemable-collapsable] .redeemable-entry .optimizedCheckout-form-input').attr('id', 'paymentStepInput');
                jquery__WEBPACK_IMPORTED_MODULE_2___default()(document).on("click", ".checkout-form .form-body [data-test=redeemable-collapsable] input[name=coupon]", function (e) {
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("input[name=coupon]").removeAttr("checked");
                  if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).hasClass("checked")) {
                    e.preventDefault();
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()(".optimizedCheckout-form-input").val('');
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).removeAttr("checked");
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).removeClass("checked");
                  } else {
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()("input:radio[name=coupon]").removeClass("checked");
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()('.form-body').find('input[name=coupon]:checked').addClass("checked");
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()('.form-body').find('input[name=coupon]:checked').attr("checked", true);
                    var code = jquery__WEBPACK_IMPORTED_MODULE_2___default()('.form-body').find('input[name=coupon]:checked').val();
                    var couponInput = document.getElementById('paymentStepInput');
                    _this.setNativeValue(couponInput, code);
                    couponInput.dispatchEvent(new Event('input', {
                      bubbles: true
                    }));
                  }
                });
              });
              this.ready('.cartDrawer', function (element) {
                var couponInputLengthInterval = '';
                setTimeout(function () {
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()('.cartDrawer').click(function () {
                    couponInputLengthInterval = setInterval(function () {
                      jquery__WEBPACK_IMPORTED_MODULE_2___default()("input[name=coupon]").removeAttr("checked");
                      if (jquery__WEBPACK_IMPORTED_MODULE_2___default()('.ReactModalPortal [data-test=redeemable-collapsable]').length > 0) {
                        clearInterval(couponInputLengthInterval);
                        var groupID = jquery__WEBPACK_IMPORTED_MODULE_2___default()('#customer-group-id').text();
                        if (groupID.length === 0) {
                          groupID = 0;
                        }
                        var selectorDiv = jquery__WEBPACK_IMPORTED_MODULE_2___default()('.ReactModalPortal [data-test=redeemable-collapsable]');
                        _this.getCoupons(groupID, selectorDiv);
                        jquery__WEBPACK_IMPORTED_MODULE_2___default()('.ReactModalPortal [data-test=redeemable-collapsable] .redeemable-entry .optimizedCheckout-form-input').attr('id', 'mobileLayoutInput');
                        jquery__WEBPACK_IMPORTED_MODULE_2___default()(document).on("click", ".ReactModalPortal [data-test=redeemable-collapsable] input[name=coupon]", function (e) {
                          if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).hasClass("checked")) {
                            jquery__WEBPACK_IMPORTED_MODULE_2___default()(".optimizedCheckout-form-input").val('');
                            jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).removeClass("checked");
                            jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).removeAttr("checked");
                          } else {
                            jquery__WEBPACK_IMPORTED_MODULE_2___default()("input:radio[name=coupon]").removeAttr("checked");
                            jquery__WEBPACK_IMPORTED_MODULE_2___default()("input:radio[name=coupon]").removeClass("checked");
                            setTimeout(function () {
                              jquery__WEBPACK_IMPORTED_MODULE_2___default()(".ReactModalPortal .modalOverlay").find("input[name=coupon]:checked").addClass("checked");
                              jquery__WEBPACK_IMPORTED_MODULE_2___default()(".ReactModalPortal .modalOverlay").find("input[name=coupon]:checked").attr("checked", true);
                            }, 50);
                            var code = jquery__WEBPACK_IMPORTED_MODULE_2___default()(".ReactModalPortal .modalOverlay").find("input[name=coupon]:checked").val();
                            var couponInput = document.getElementById('mobileLayoutInput');
                            _this.setNativeValue(couponInput, code);
                            couponInput.dispatchEvent(new Event('input', {
                              bubbles: true
                            }));
                          }
                        });
                      }
                    }, 500);
                  });
                }, 1000);
              });
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(document).on("keyup", "#postCodeInput", function () {
                var numberReg = /^[0-9]+$/;
                var code = jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").val();
                var html = '';
                if (code.length != 6 && code.length != 0) {
                  event.preventDefault();
                  html += '<ul class="form-field-errors" data-test="shipping-address-postal-code-field-error-message">';
                  html += '<li class="form-field-error">';
                  html += '<label class="form-inlineMessage" for="shippingAddress.postalCode" style="color:#d14343">Postal Code is not valid</label></li></ul>';
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").parent().find("ul.form-field-errors").remove();
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").parent().find(".form-label").css("color", "#d14343");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").css("border-color", "#d14343");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()(html).insertAfter("#postCodeInput");
                } else if (!numberReg.test(code) && code.length != 0) {
                  event.preventDefault();
                  html += '<ul class="form-field-errors" data-test="shipping-address-postal-code-field-error-message">';
                  html += '<li class="form-field-error">';
                  html += '<label class="form-inlineMessage" for="shippingAddress.postalCode" style="color:#d14343">Postal Code is not valid</label></li></ul>';
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").parent().find("ul.form-field-errors").remove();
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").parent().find(".form-label").css("color", "#d14343");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").css("border-color", "#d14343");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()(html).insertAfter("#postCodeInput");
                } else if (numberReg.test(code) && code.length == 6) {
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").parent().find(".form-label").css("color", "");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").css("border-color", "#78bf95");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#postCodeInput").parent().find("ul.form-field-errors").remove();
                }
              });
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(document).on("keyup", "#phoneInput", function () {
                var numberReg = /^[0-9]+$/;
                var number = jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").val();
                var mobilehtml = '';
                if (number.length != 10 && number.length != 0) {
                  event.preventDefault();
                  mobilehtml += '<ul class="form-field-errors" data-test="shipping-address-mobile-number-field-error-message">';
                  mobilehtml += '<li class="form-field-error">';
                  mobilehtml += '<label class="form-inlineMessage" for="shippingAddress.postalCode" style="color:#d14343">mobile number is not valid</label></li></ul>';
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").parent().find("ul.form-field-errors").remove();
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").parent().find(".form-label").css("color", "#d14343");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").css("border-color", "#d14343");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()(mobilehtml).insertAfter("#phoneInput");
                } else if (!numberReg.test(number) && number.length != 0) {
                  event.preventDefault();
                  mobilehtml += '<ul class="form-field-errors" data-test="shipping-address-postal-code-field-error-message">';
                  mobilehtml += '<li class="form-field-error">';
                  mobilehtml += '<label class="form-inlineMessage" for="shippingAddress.postalCode" style="color:#d14343">mobile number is not valid</label></li></ul>';
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").parent().find("ul.form-field-errors").remove();
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").parent().find(".form-label").css("color", "#d14343");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").css("border-color", "#d14343");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()(mobilehtml).insertAfter("#phoneInput");
                } else if (numberReg.test(number) && number.length == 10) {
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").parent().find(".form-label").css("color", "");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").css("border-color", "#78bf95");
                  jquery__WEBPACK_IMPORTED_MODULE_2___default()("#phoneInput").parent().find("ul.form-field-errors").remove();
                }
              });
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(document).on("keyup", "#paymentStepInput", function (e) {
                jquery__WEBPACK_IMPORTED_MODULE_2___default()(".checkout-form .form-body [data-test=redeemable-collapsable] input[name=coupon]").each(function () {
                  var input = jquery__WEBPACK_IMPORTED_MODULE_2___default()('#paymentStepInput').val();
                  if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).val() != input) {
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()("input[name=coupon]").removeAttr("checked");
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()("input[name=coupon]").removeClass("checked");
                  } else {
                    if (input == jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).val()) {
                      jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).addClass("checked");
                      jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).attr("checked", true);
                      return false;
                    }
                  }
                });
              });
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(document).on("keyup", "#cartLayoutInput", function (e) {
                jquery__WEBPACK_IMPORTED_MODULE_2___default()(".layout-cart [data-test=redeemable-collapsable] input[name=coupon]").each(function () {
                  var input = jquery__WEBPACK_IMPORTED_MODULE_2___default()('#cartLayoutInput').val();
                  if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).val() != input) {
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()("input[name=coupon]").removeAttr("checked");
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()("input[name=coupon]").removeClass("checked");
                  } else {
                    if (input == jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).val()) {
                      jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).addClass("checked");
                      jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).attr("checked", true);
                      return false;
                    }
                  }
                });
              });
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(document).on("keyup", "#mobileLayoutInput", function (e) {
                jquery__WEBPACK_IMPORTED_MODULE_2___default()(".ReactModalPortal [data-test=redeemable-collapsable] input[name=coupon]").each(function () {
                  var input = jquery__WEBPACK_IMPORTED_MODULE_2___default()('#mobileLayoutInput').val();
                  if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).val() != input) {
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()("input[name=coupon]").removeAttr("checked");
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()("input[name=coupon]").removeClass("checked");
                  } else {
                    if (input == jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).val()) {
                      jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).addClass("checked");
                      jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).attr("checked", true);
                      return false;
                    }
                  }
                });
              });
            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    function onReady() {
      return _onReady.apply(this, arguments);
    }
    return onReady;
  }();
  _proto.ready = function ready(selector, fn) {
    // Store the selector and callback to be monitored
    listeners.push({
      selector: selector,
      fn: fn
    });
    if (!observer) {
      // Watch for changes in the document
      observer = new MutationObserver(this.check);
      observer.observe(doc.documentElement, {
        childList: true,
        subtree: true
      });
    }
    // Check if the element is currently in the DOM
    this.check();
  };
  _proto.check = function check() {
    // Check the DOM for elements matching a stored selector
    for (var i = 0, len = listeners.length, listener, elements; i < len; i++) {
      listener = listeners[i];
      // Query for elements matching the specified selector
      elements = doc.querySelectorAll(listener.selector);
      for (var j = 0, jLen = elements.length, element; j < jLen; j++) {
        element = elements[j];
        // Make sure the callback isn't invoked with the 
        // same element more than once
        if (!element.ready) {
          element.ready = true;
          // Invoke the callback with the element
          listener.fn.call(element, element);
        }
      }
    }
  };
  _proto.setNativeValue = function setNativeValue(element, value) {
    var valueSetter = Object.getOwnPropertyDescriptor(element, 'value').set;
    var prototype = Object.getPrototypeOf(element);
    var prototypeValueSetter = Object.getOwnPropertyDescriptor(prototype, 'value').set;
    if (valueSetter && valueSetter !== prototypeValueSetter) {
      prototypeValueSetter.call(element, value);
    } else {
      valueSetter.call(element, value);
    }
  };
  _proto.getCoupons = function getCoupons(groupID, selectorDiv) {
    jquery__WEBPACK_IMPORTED_MODULE_2___default.a.ajax({
      type: "POST",
      url: "https://bg-sync-api-dev.kapiva.in/api/coupon.php",
      async: false,
      headers: {
        'gid': groupID
      },
      success: function success(data) {
        var data = JSON.parse(data);
        var currentDate = new Date();
        var couponBlock = '<div class="coupon-list">';
        if (data['status'] != 'fail') {
          for (var i = 0; i < data['data'].length; i++) {
            var coupons = data['data'][i];
            var value = moment(coupons['expires']).format('MM/DD/YYYY h:mm a');
            var dt = new Date(value);
            if (currentDate < dt) {
              couponBlock += '<li><label class="code_input"><strong>' + coupons['code'] + '</strong><br>Save ' + coupons['amount'] + ' <br>Expires on : ' + value + '  <input type="radio" value="' + coupons['code'] + '" name="coupon"> <span class="checkmark"></span></label></li>';
            }
          }
        }
        couponBlock += "</div>";
        // var selectorDiv=$('[data-test=redeemable-collapsable]');
        selectorDiv.find(".coupon-list").remove();
        selectorDiv.append(couponBlock);
      }
    });
  };
  return Checkout;
}(_page_manager__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,